{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { auth } from '../../utils/api';\n// Only set loading to true if we have a token to validate\nconst token = localStorage.getItem('token');\nconst initialState = {\n  user: null,\n  token,\n  isAuthenticated: false,\n  isLoading: !!token\n};\nexport const initializeAuth = createAsyncThunk('auth/initialize', async () => {\n  const user = await auth.validateToken();\n  return user;\n});\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setCredentials: (state, action) => {\n      const {\n        user,\n        token\n      } = action.payload;\n      state.user = user;\n      state.token = token;\n      state.isAuthenticated = true;\n      state.isLoading = false;\n      localStorage.setItem('token', token);\n    },\n    logout: state => {\n      state.user = null;\n      state.token = null;\n      state.isAuthenticated = false;\n      state.isLoading = false;\n      localStorage.removeItem('token');\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(initializeAuth.pending, state => {\n      state.isLoading = true;\n    }).addCase(initializeAuth.fulfilled, (state, action) => {\n      state.user = action.payload;\n      state.isAuthenticated = true;\n      state.isLoading = false;\n    }).addCase(initializeAuth.rejected, state => {\n      state.user = null;\n      state.token = null;\n      state.isAuthenticated = false;\n      state.isLoading = false;\n      localStorage.removeItem('token');\n    });\n  }\n});\nexport const {\n  setCredentials,\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","auth","token","localStorage","getItem","initialState","user","isAuthenticated","isLoading","initializeAuth","validateToken","authSlice","name","reducers","setCredentials","state","action","payload","setItem","logout","removeItem","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["/Users/joyous/Desktop/joyous/aichat/frontend/src/store/slices/authSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { auth } from '../../utils/api';\n\ninterface User {\n  id: string;\n  username: string;\n  email: string;\n}\n\ninterface AuthState {\n  user: User | null;\n  token: string | null;\n  isAuthenticated: boolean;\n  isLoading: boolean;\n}\n\n// Only set loading to true if we have a token to validate\nconst token = localStorage.getItem('token');\nconst initialState: AuthState = {\n  user: null,\n  token,\n  isAuthenticated: false,\n  isLoading: !!token,\n};\n\nexport const initializeAuth = createAsyncThunk(\n  'auth/initialize',\n  async () => {\n    const user = await auth.validateToken();\n    return user;\n  }\n);\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    setCredentials: (\n      state,\n      action: PayloadAction<{ user: User; token: string }>\n    ) => {\n      const { user, token } = action.payload;\n      state.user = user;\n      state.token = token;\n      state.isAuthenticated = true;\n      state.isLoading = false;\n      localStorage.setItem('token', token);\n    },\n    logout: (state) => {\n      state.user = null;\n      state.token = null;\n      state.isAuthenticated = false;\n      state.isLoading = false;\n      localStorage.removeItem('token');\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(initializeAuth.pending, (state) => {\n        state.isLoading = true;\n      })\n      .addCase(initializeAuth.fulfilled, (state, action) => {\n        state.user = action.payload;\n        state.isAuthenticated = true;\n        state.isLoading = false;\n      })\n      .addCase(initializeAuth.rejected, (state) => {\n        state.user = null;\n        state.token = null;\n        state.isAuthenticated = false;\n        state.isLoading = false;\n        localStorage.removeItem('token');\n      });\n  },\n});\n\nexport const { setCredentials, logout } = authSlice.actions;\nexport default authSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,EAAiBC,gBAAgB,QAAQ,kBAAkB;AAC/E,SAASC,IAAI,QAAQ,iBAAiB;AAetC;AACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;AAC3C,MAAMC,YAAuB,GAAG;EAC9BC,IAAI,EAAE,IAAI;EACVJ,KAAK;EACLK,eAAe,EAAE,KAAK;EACtBC,SAAS,EAAE,CAAC,CAACN;AACf,CAAC;AAED,OAAO,MAAMO,cAAc,GAAGT,gBAAgB,CAC5C,iBAAiB,EACjB,YAAY;EACV,MAAMM,IAAI,GAAG,MAAML,IAAI,CAACS,aAAa,CAAC,CAAC;EACvC,OAAOJ,IAAI;AACb,CACF,CAAC;AAED,MAAMK,SAAS,GAAGZ,WAAW,CAAC;EAC5Ba,IAAI,EAAE,MAAM;EACZP,YAAY;EACZQ,QAAQ,EAAE;IACRC,cAAc,EAAEA,CACdC,KAAK,EACLC,MAAoD,KACjD;MACH,MAAM;QAAEV,IAAI;QAAEJ;MAAM,CAAC,GAAGc,MAAM,CAACC,OAAO;MACtCF,KAAK,CAACT,IAAI,GAAGA,IAAI;MACjBS,KAAK,CAACb,KAAK,GAAGA,KAAK;MACnBa,KAAK,CAACR,eAAe,GAAG,IAAI;MAC5BQ,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBL,YAAY,CAACe,OAAO,CAAC,OAAO,EAAEhB,KAAK,CAAC;IACtC,CAAC;IACDiB,MAAM,EAAGJ,KAAK,IAAK;MACjBA,KAAK,CAACT,IAAI,GAAG,IAAI;MACjBS,KAAK,CAACb,KAAK,GAAG,IAAI;MAClBa,KAAK,CAACR,eAAe,GAAG,KAAK;MAC7BQ,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBL,YAAY,CAACiB,UAAU,CAAC,OAAO,CAAC;IAClC;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACd,cAAc,CAACe,OAAO,EAAGT,KAAK,IAAK;MAC1CA,KAAK,CAACP,SAAS,GAAG,IAAI;IACxB,CAAC,CAAC,CACDe,OAAO,CAACd,cAAc,CAACgB,SAAS,EAAE,CAACV,KAAK,EAAEC,MAAM,KAAK;MACpDD,KAAK,CAACT,IAAI,GAAGU,MAAM,CAACC,OAAO;MAC3BF,KAAK,CAACR,eAAe,GAAG,IAAI;MAC5BQ,KAAK,CAACP,SAAS,GAAG,KAAK;IACzB,CAAC,CAAC,CACDe,OAAO,CAACd,cAAc,CAACiB,QAAQ,EAAGX,KAAK,IAAK;MAC3CA,KAAK,CAACT,IAAI,GAAG,IAAI;MACjBS,KAAK,CAACb,KAAK,GAAG,IAAI;MAClBa,KAAK,CAACR,eAAe,GAAG,KAAK;MAC7BQ,KAAK,CAACP,SAAS,GAAG,KAAK;MACvBL,YAAY,CAACiB,UAAU,CAAC,OAAO,CAAC;IAClC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEN,cAAc;EAAEK;AAAO,CAAC,GAAGR,SAAS,CAACgB,OAAO;AAC3D,eAAehB,SAAS,CAACiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}