{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8000/api';\nconst TOKEN_EXPIRY_TIME = 3 * 60 * 60 * 1000; // 3 hours in milliseconds\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Token management\nconst getStoredAuthData = () => {\n  const token = localStorage.getItem('token');\n  const tokenTimestamp = localStorage.getItem('tokenTimestamp');\n  return {\n    token,\n    tokenTimestamp: tokenTimestamp ? parseInt(tokenTimestamp, 10) : null\n  };\n};\nconst setStoredAuthData = token => {\n  localStorage.setItem('token', token);\n  localStorage.setItem('tokenTimestamp', Date.now().toString());\n};\nconst clearStoredAuthData = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('tokenTimestamp');\n};\nconst isTokenExpired = () => {\n  const {\n    tokenTimestamp\n  } = getStoredAuthData();\n  if (!tokenTimestamp) return true;\n  return Date.now() - tokenTimestamp > TOKEN_EXPIRY_TIME;\n};\n\n// Add a request interceptor to add the token to all requests\napi.interceptors.request.use(config => {\n  const {\n    token\n  } = getStoredAuthData();\n  if (token) {\n    if (isTokenExpired()) {\n      clearStoredAuthData();\n      window.location.href = '/login?expired=true';\n      return Promise.reject('Token expired');\n    }\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Add a response interceptor to handle token expiration\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    clearStoredAuthData();\n    window.location.href = '/login?expired=true';\n  }\n  return Promise.reject(error);\n});\nexport const auth = {\n  login: async (email, password) => {\n    const response = await api.post('/auth/login', {\n      email,\n      password\n    });\n    const {\n      token,\n      user\n    } = response.data;\n    setStoredAuthData(token);\n    return {\n      user,\n      token\n    };\n  },\n  validateToken: async () => {\n    const {\n      token\n    } = getStoredAuthData();\n    if (!token || isTokenExpired()) {\n      throw new Error('Token is invalid or expired');\n    }\n    const response = await api.get('/users/profile');\n    return response.data;\n  },\n  logout: () => {\n    clearStoredAuthData();\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","TOKEN_EXPIRY_TIME","api","create","baseURL","headers","getStoredAuthData","token","localStorage","getItem","tokenTimestamp","parseInt","setStoredAuthData","setItem","Date","now","toString","clearStoredAuthData","removeItem","isTokenExpired","interceptors","request","use","config","window","location","href","Promise","reject","Authorization","error","response","_error$response","status","auth","login","email","password","post","user","data","validateToken","Error","get","logout"],"sources":["/Users/joyous/Desktop/joyous/aichat/frontend/src/utils/api.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8000/api';\nconst TOKEN_EXPIRY_TIME = 3 * 60 * 60 * 1000; // 3 hours in milliseconds\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Token management\nconst getStoredAuthData = () => {\n  const token = localStorage.getItem('token');\n  const tokenTimestamp = localStorage.getItem('tokenTimestamp');\n  return { token, tokenTimestamp: tokenTimestamp ? parseInt(tokenTimestamp, 10) : null };\n};\n\nconst setStoredAuthData = (token: string) => {\n  localStorage.setItem('token', token);\n  localStorage.setItem('tokenTimestamp', Date.now().toString());\n};\n\nconst clearStoredAuthData = () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('tokenTimestamp');\n};\n\nconst isTokenExpired = () => {\n  const { tokenTimestamp } = getStoredAuthData();\n  if (!tokenTimestamp) return true;\n  return Date.now() - tokenTimestamp > TOKEN_EXPIRY_TIME;\n};\n\n// Add a request interceptor to add the token to all requests\napi.interceptors.request.use(\n  (config) => {\n    const { token } = getStoredAuthData();\n    if (token) {\n      if (isTokenExpired()) {\n        clearStoredAuthData();\n        window.location.href = '/login?expired=true';\n        return Promise.reject('Token expired');\n      }\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Add a response interceptor to handle token expiration\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      clearStoredAuthData();\n      window.location.href = '/login?expired=true';\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const auth = {\n  login: async (email: string, password: string) => {\n    const response = await api.post('/auth/login', { email, password });\n    const { token, user } = response.data;\n    setStoredAuthData(token);\n    return { user, token };\n  },\n  validateToken: async () => {\n    const { token } = getStoredAuthData();\n    if (!token || isTokenExpired()) {\n      throw new Error('Token is invalid or expired');\n    }\n    const response = await api.get('/users/profile');\n    return response.data;\n  },\n  logout: () => {\n    clearStoredAuthData();\n  }\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}